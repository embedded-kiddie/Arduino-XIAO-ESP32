/*=============================================================
 * Wedget manager
 *=============================================================*/
#include <pgmspace.h>

#define ICON_WIDTH  50
#define ICON_HEIGHT 50

/*-------------------------------------------------------------
 * Widget
 *-------------------------------------------------------------*/
typedef struct {
  uint16_t      x, y;   // The top left coordinate of the widget
  uint16_t      w, h;   // Widget width and height
  const uint8_t *img;   // PNG image data
  size_t        size;   // Size of PNG image data
  EventType_t   event;  // The touch event to detect
  void          (*callback)(EventPoint_t &ep);  // Callback event handler
} Widget_t;

/*-------------------------------------------------------------
 * icons
 *-------------------------------------------------------------*/
// icon-camera1.png
// https://lang-ship.com/tools/image2data/
// RAW File Dump
const unsigned char icon_camera1[490] PROGMEM = {
0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x54, 0xd7, 
0x6d, 0x00, 0x00, 0x01, 0xb1, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0x62, 0x18, 0x22, 0x60, 0x14, 
0x18, 0x34, 0x4f, 0x00, 0x81, 0xce, 0x3e, 0x10, 0xd9, 0x17, 0xc9, 0x4c, 0x58, 0x87, 0xdd, 0xc7, 
0xff, 0x28, 0xa0, 0x07, 0xbb, 0x32, 0x96, 0xc4, 0xb2, 0xb2, 0x32, 0x6b, 0x30, 0x93, 0x0f, 0xd0, 
0x4e, 0x39, 0x04, 0x5a, 0x11, 0x86, 0x01, 0xf4, 0x64, 0xdb, 0x76, 0x6d, 0xb2, 0x6d, 0x7b, 0x93, 
0x6d, 0xbb, 0x36, 0xd9, 0xd6, 0x36, 0xdb, 0xdc, 0x64, 0xdb, 0xae, 0x4d, 0x7e, 0xb6, 0x7d, 0x6d, 
0xe3, 0xbf, 0xf3, 0xac, 0xb3, 0x9a, 0x0f, 0x67, 0x66, 0x7e, 0x7e, 0x53, 0xdb, 0xa2, 0x18, 0x80, 
0x23, 0x85, 0xab, 0x0e, 0xd1, 0xd5, 0xbe, 0xd6, 0xac, 0x51, 0xa3, 0x46, 0xbb, 0x5b, 0x6a, 0x7b, 
0xfc, 0xc7, 0xd6, 0xae, 0x61, 0xa6, 0x4a, 0x41, 0x80, 0xd2, 0xaf, 0x22, 0xe2, 0x75, 0x25, 0x65, 
0xb4, 0x16, 0xa5, 0xda, 0x09, 0xb1, 0xd1, 0x66, 0xc2, 0x6f, 0x17, 0x02, 0xba, 0xa8, 0xa5, 0x20, 
0x6b, 0x00, 0x0c, 0x97, 0xa4, 0xa8, 0x5a, 0xa4, 0xa9, 0x12, 0xf7, 0x34, 0xd0, 0xad, 0x92, 0xf4, 
0xf6, 0xe0, 0x86, 0x8d, 0x47, 0x3f, 0x2a, 0xac, 0x32, 0xc3, 0x68, 0xe8, 0xe3, 0x5a, 0x91, 0x1f, 
0x6e, 0x99, 0x17, 0x20, 0x7f, 0x87, 0xb3, 0x2a, 0x53, 0xce, 0xaf, 0x10, 0xdc, 0x72, 0xa9, 0xf8, 
0x0e, 0x00, 0x0a, 0x54, 0x28, 0x9f, 0x0f, 0x18, 0x19, 0x6a, 0x5a, 0xd1, 0x79, 0x25, 0x7a, 0x84, 
0xb9, 0x52, 0xfc, 0x9a, 0x41, 0xa3, 0xbd, 0x5f, 0x82, 0x82, 0x3e, 0x6c, 0xad, 0x0d, 0x5d, 0xc2, 
0x4d, 0xf9, 0xff, 0x89, 0xae, 0xc6, 0x22, 0x1b, 0x08, 0xd3, 0xc3, 0x0c, 0xcf, 0x01, 0x23, 0x61, 
0xbc, 0x4a, 0x38, 0x63, 0x27, 0x61, 0x8a, 0xca, 0xec, 0x0f, 0x83, 0x9b, 0x22, 0x45, 0xd6, 0x86, 
0x7a, 0xe1, 0x96, 0xd0, 0xa7, 0x12, 0xfd, 0x55, 0x02, 0xe5, 0x4b, 0x7e, 0xb6, 0x59, 0xc7, 0x4b, 
0x29, 0xe1, 0x25, 0x50, 0x4e, 0x93, 0xef, 0xbd, 0x75, 0x7c, 0x07, 0x6e, 0x0b, 0x94, 0xdd, 0x94, 
0xf2, 0xb1, 0x8e, 0x7f, 0xe4, 0xe7, 0x84, 0x40, 0xd9, 0x6b, 0xf7, 0x23, 0x5f, 0xf3, 0x71, 0x4a, 
0xa0, 0x5c, 0x22, 0xcf, 0x33, 0xeb, 0xf8, 0x3a, 0x3c, 0x14, 0x28, 0xbf, 0x8a, 0xb0, 0xc2, 0x3a, 
0x9e, 0x4c, 0xb9, 0x40, 0x81, 0xa2, 0xec, 0x43, 0x85, 0xbf, 0x96, 0xf0, 0x73, 0x71, 0xc6, 0x08, 
0x97, 0xf2, 0x4e, 0x1e, 0x7a, 0x45, 0x9b, 0x82, 0xe0, 0xd6, 0x14, 0x7c, 0x2b, 0x3e, 0x2f, 0xb3, 
0xa1, 0xbb, 0xf1, 0x9a, 0x79, 0xdb, 0x1a, 0x56, 0xa9, 0xc5, 0x4a, 0xec, 0x30, 0x28, 0x39, 0xf5, 
0xe2, 0xdb, 0x37, 0x67, 0xc6, 0x16, 0x81, 0x49, 0x32, 0x4f, 0x4e, 0x65, 0xfc, 0xe2, 0x02, 0x18, 
0x29, 0xba, 0x56, 0xee, 0xe1, 0x41, 0x7e, 0x36, 0xa6, 0x32, 0x40, 0xb5, 0x29, 0xef, 0x25, 0x9c, 
0xfd, 0xe0, 0x17, 0x57, 0xaf, 0xbd, 0x0e, 0x4b, 0xff, 0x1b, 0xc6, 0x5a, 0x19, 0x22, 0x49, 0x51, 
0x34, 0x01, 0x9a, 0xab, 0xa4, 0x28, 0xa1, 0xe5, 0x80, 0x7c, 0xbd, 0xd7, 0xef, 0xf7, 0x98, 0x4d, 
0x7d, 0xc8, 0x25, 0x93, 0xa2, 0x01, 0x15, 0x02, 0x12, 0xb7, 0xb9, 0x6a, 0x11, 0xae, 0x00, 0x00, 
0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82, };

// icon-camera2.png
// https://lang-ship.com/tools/image2data/
// RAW File Dump
const unsigned char icon_camera2[973] PROGMEM = {
0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x08, 0x02, 0x00, 0x00, 0x00, 0x91, 0x5d, 0x1f, 
0xe6, 0x00, 0x00, 0x03, 0x94, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0x62, 0x18, 0x01, 0x60, 0x14, 
0x8c, 0x82, 0x51, 0x30, 0x0a, 0xf4, 0xf4, 0xf4, 0x9a, 0x9a, 0x9a, 0x26, 0xa0, 0x82, 0xce, 0xce, 
0xce, 0xde, 0xde, 0x5e, 0x64, 0x91, 0xfe, 0xfe, 0xfe, 0xe8, 0xe8, 0x68, 0x66, 0x66, 0x66, 0x7a, 
0xb8, 0xc9, 0xda, 0xda, 0xfa, 0xfd, 0xfb, 0xf7, 0xff, 0x89, 0x06, 0x13, 0x27, 0x4e, 0xa4, 0xd4, 
0x4a, 0x16, 0x16, 0x96, 0x84, 0x84, 0x84, 0x32, 0x18, 0xb0, 0xb5, 0xb5, 0x45, 0x53, 0xc0, 0xc3, 
0xc3, 0x73, 0xe1, 0xc2, 0x85, 0xff, 0xa4, 0x80, 0xbf, 0x7f, 0xff, 0xfa, 0xf9, 0xf9, 0x91, 0xe9, 
0x20, 0x76, 0x76, 0x76, 0x29, 0x29, 0x29, 0x5f, 0x5f, 0x5f, 0x64, 0x13, 0x2f, 0x5f, 0xbe, 0x2c, 
0x27, 0x27, 0x27, 0x0b, 0x03, 0x66, 0x66, 0x66, 0x5b, 0xb6, 0x6c, 0x01, 0xb0, 0x5f, 0x0e, 0xdc, 
0x6e, 0x04, 0x61, 0x18, 0x5e, 0x65, 0x1d, 0xd5, 0x8c, 0x6a, 0xdb, 0xb6, 0x6d, 0xff, 0x80, 0xda, 
0xf6, 0x4f, 0xa8, 0x6d, 0xbb, 0x3d, 0xaa, 0x6d, 0xdb, 0xf6, 0xb5, 0xad, 0xf7, 0x66, 0xf6, 0xda, 
0x08, 0x8a, 0xf7, 0xc4, 0x99, 0xef, 0xec, 0xb3, 0xf3, 0x71, 0x12, 0x0b, 0xae, 0x5f, 0xbf, 0x7e, 
0x8d, 0x1d, 0x3b, 0xd6, 0x66, 0xb3, 0x55, 0xce, 0x55, 0x00, 0xe0, 0x79, 0x9e, 0x4a, 0x95, 0xd1, 
0x68, 0xbc, 0x76, 0xed, 0x1a, 0x5c, 0x13, 0x11, 0x11, 0x91, 0xe9, 0x46, 0x43, 0xd2, 0x09, 0x5f, 
0x13, 0x8b, 0xa0, 0xb0, 0xb0, 0xb0, 0x90, 0x5c, 0x15, 0x10, 0x10, 0x70, 0xf1, 0xe2, 0x45, 0x38, 
0x44, 0xc3, 0x6a, 0xdb, 0xb6, 0x6d, 0xa2, 0xd7, 0xa8, 0x75, 0xeb, 0xd6, 0x1a, 0xd6, 0xc0, 0x81, 
0x03, 0xbd, 0x07, 0x0b, 0x30, 0xff, 0xb1, 0xb2, 0x08, 0x71, 0x7c, 0xe5, 0xca, 0x95, 0x1f, 0x3f, 
0x7e, 0xb8, 0x04, 0x2b, 0x26, 0x26, 0xe6, 0xee, 0xdd, 0xbb, 0x9b, 0x36, 0x6d, 0x5a, 0xbe, 0x7c, 
0x39, 0x6a, 0xec, 0x96, 0x2d, 0x5b, 0xee, 0xdf, 0xbf, 0x1f, 0x17, 0x17, 0x97, 0xa7, 0xd5, 0x90, 
0x21, 0x43, 0x70, 0xe9, 0x2a, 0x55, 0xaa, 0x7c, 0xfa, 0xf4, 0xa9, 0x38, 0xb1, 0x70, 0xed, 0xad, 
0x5b, 0xb7, 0x36, 0x6d, 0xda, 0x94, 0x61, 0x18, 0x2a, 0x9d, 0x58, 0x8e, 0x6b, 0xd1, 0xa2, 0xc5, 
0xee, 0xdd, 0xbb, 0x73, 0xc9, 0xdc, 0xdf, 0xbf, 0x7f, 0xcb, 0xb2, 0x4c, 0xd6, 0x9f, 0x38, 0x71, 
0xa2, 0xd8, 0xb0, 0xb0, 0xf9, 0x7d, 0xfb, 0xf6, 0x4d, 0x45, 0x29, 0xc9, 0xd2, 0xb5, 0x78, 0x06, 
0x8f, 0x12, 0x2c, 0x4d, 0xa5, 0x08, 0xfb, 0xe1, 0xe3, 0xe3, 0x93, 0xd3, 0x2d, 0x4d, 0x9d, 0x3a, 
0x55, 0xaf, 0xd7, 0xa3, 0x62, 0xfb, 0xfa, 0xfa, 0x16, 0x0f, 0xd6, 0xcf, 0x9f, 0x3f, 0x9b, 0x34, 
0x69, 0x42, 0x6c, 0x3b, 0x4a, 0xdc, 0xbe, 0x72, 0xd2, 0x5b, 0xab, 0xea, 0x63, 0xd7, 0xe3, 0xf1, 
0xda, 0xaa, 0xee, 0x2a, 0x2b, 0xb5, 0x91, 0xb4, 0x3e, 0x88, 0x6c, 0xf7, 0xf3, 0xf3, 0x4b, 0xcc, 
0x41, 0x70, 0x5f, 0x64, 0x64, 0x64, 0xf1, 0xc4, 0x56, 0x6c, 0x6c, 0x2c, 0x69, 0x26, 0x1c, 0x45, 
0xad, 0x2c, 0x29, 0x04, 0x3b, 0xf4, 0x91, 0x55, 0xf4, 0x78, 0x0d, 0x74, 0x3e, 0xc8, 0x57, 0x7c, 
0x58, 0x54, 0x42, 0x20, 0xae, 0x1d, 0x39, 0x72, 0x24, 0xbc, 0xe9, 0xf2, 0x4c, 0xdc, 0xb7, 0x6f, 
0x1f, 0xb1, 0x5a, 0x51, 0x52, 0x88, 0xa9, 0x62, 0x00, 0x41, 0x40, 0x96, 0x47, 0x90, 0x43, 0x1f, 
0x5d, 0xc5, 0x30, 0xdf, 0x2c, 0xa4, 0x46, 0x8f, 0x6b, 0xb1, 0xb0, 0x55, 0xad, 0x5a, 0xb5, 0x82, 
0x49, 0x7b, 0x89, 0xc3, 0xc6, 0x68, 0x4c, 0x39, 0x90, 0xe1, 0xb5, 0xb9, 0x98, 0xec, 0xcd, 0x2e, 
0x5d, 0xba, 0x60, 0xc3, 0x5c, 0x88, 0xf5, 0xfc, 0xf9, 0x73, 0xd2, 0x4d, 0xf7, 0x94, 0x95, 0x22, 
0xab, 0xe4, 0xc8, 0x44, 0x1e, 0x51, 0x55, 0xf4, 0x9b, 0xcb, 0x48, 0x58, 0x8c, 0xa4, 0x7b, 0xff, 
0xfe, 0xbd, 0x0b, 0xb1, 0x0e, 0x1c, 0x38, 0x40, 0xf2, 0xee, 0x8d, 0x55, 0xc5, 0x6e, 0xe5, 0x8e, 
0x15, 0xe2, 0xd0, 0x3f, 0xb3, 0xa8, 0x7a, 0x86, 0x86, 0xc9, 0xa9, 0x53, 0xa7, 0x5c, 0x88, 0x45, 
0x66, 0xba, 0x9a, 0x3c, 0xe3, 0x93, 0xab, 0x07, 0xc9, 0x03, 0x0b, 0x7e, 0xd8, 0xf5, 0x76, 0x1d, 
0x03, 0x93, 0xcd, 0x9b, 0x37, 0xbb, 0x10, 0x6b, 0xf5, 0xea, 0xd5, 0x1a, 0x96, 0x3d, 0x6f, 0x2c, 
0x84, 0xd7, 0xf7, 0x14, 0x2c, 0x14, 0x5e, 0x17, 0x62, 0x1d, 0x3f, 0x7e, 0x1c, 0xeb, 0xcd, 0x0c, 
0xfd, 0x2a, 0x7f, 0x4e, 0x7c, 0x62, 0x51, 0x55, 0x3a, 0xd9, 0x89, 0x67, 0xce, 0x9c, 0x71, 0x21, 
0xd6, 0x87, 0x0f, 0x1f, 0x14, 0x45, 0x81, 0xc9, 0x8e, 0xb2, 0x52, 0x54, 0xde, 0x21, 0x6f, 0x58, 
0x57, 0x46, 0xc4, 0x62, 0x93, 0xc9, 0xf4, 0xfd, 0xfb, 0x77, 0x17, 0x62, 0x25, 0x24, 0x24, 0xf4, 
0xee, 0xdd, 0x1b, 0x26, 0xad, 0x44, 0x36, 0x10, 0x6e, 0xca, 0xd5, 0x83, 0xbe, 0x76, 0x7d, 0x23, 
0x81, 0xc5, 0xe2, 0xa1, 0x43, 0x87, 0xba, 0xbc, 0x9c, 0x9e, 0x3f, 0x7f, 0x9e, 0xf4, 0xe6, 0x05, 
0x66, 0x01, 0xfb, 0x11, 0x94, 0x03, 0x13, 0xca, 0xc7, 0x34, 0x13, 0x8f, 0x65, 0x3a, 0x9d, 0xee, 
0xc6, 0x8d, 0x1b, 0x2e, 0xc7, 0x82, 0x26, 0x4d, 0x9a, 0x04, 0x2b, 0x84, 0x0c, 0xea, 0xb8, 0xbf, 
0xb3, 0x3e, 0x85, 0x54, 0x49, 0x46, 0xc1, 0x03, 0x1f, 0xc0, 0xea, 0xeb, 0xd0, 0x4f, 0x77, 0x32, 
0x41, 0x38, 0x41, 0xb9, 0x69, 0x0c, 0xc4, 0x04, 0x47, 0xa6, 0x25, 0xa8, 0x85, 0xc8, 0x6e, 0x2a, 
0x23, 0x3e, 0xb5, 0xa8, 0x48, 0x3a, 0x3c, 0x10, 0xe3, 0xeb, 0xcb, 0x88, 0x4d, 0x9c, 0xbe, 0x83, 
0x70, 0x7c, 0x8d, 0x8e, 0x8e, 0x76, 0xdf, 0x74, 0x8a, 0xce, 0x3f, 0x6b, 0xd6, 0xac, 0xd4, 0xf3, 
0x93, 0x4a, 0x53, 0x36, 0x8e, 0xc1, 0x43, 0x49, 0x99, 0x6b, 0x44, 0x51, 0x5c, 0xb8, 0x70, 0x21, 
0xc6, 0x3d, 0x0f, 0x0c, 0xcd, 0x08, 0x1a, 0xec, 0x47, 0xb9, 0x72, 0xe5, 0xa9, 0x74, 0xc2, 0x71, 
0x6f, 0xc2, 0x84, 0x09, 0x77, 0xee, 0xdc, 0xf1, 0xf0, 0x2c, 0x8f, 0x39, 0x0e, 0x7c, 0x47, 0x8f, 
0x1e, 0x3d, 0x76, 0xec, 0xd8, 0xcd, 0x9b, 0x37, 0x31, 0x60, 0xfd, 0x3f, 0xf9, 0xb8, 0x4b, 0x83, 
0x06, 0x0d, 0xd2, 0xb0, 0x30, 0x95, 0x7b, 0x0f, 0x56, 0xcf, 0x9e, 0x3d, 0x35, 0xac, 0x7a, 0xf5, 
0xea, 0xa5, 0x8d, 0x69, 0x1e, 0x55, 0x78, 0x78, 0xb8, 0xc5, 0x62, 0xa1, 0x88, 0x18, 0x26, 0x69, 
0x4c, 0xc0, 0x06, 0x64, 0x43, 0x43, 0xc3, 0x84, 0x01, 0x05, 0xcd, 0xcd, 0xcd, 0xa0, 0xa0, 0x1a, 
0x92, 0x60, 0x14, 0x8c, 0x82, 0x51, 0x30, 0x0a, 0x00, 0xc9, 0x1b, 0x33, 0x4c, 0x1c, 0x4f, 0xa9, 
0x58, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82, };

// icon-config.png
// https://lang-ship.com/tools/image2data/
// RAW File Dump
const unsigned char icon_config[609] PROGMEM = {
0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x54, 0xd7, 
0x6d, 0x00, 0x00, 0x02, 0x28, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0x62, 0x18, 0xe6, 0x40, 0x96, 
0x19, 0xca, 0xb0, 0xf7, 0xe0, 0x20, 0x4a, 0x83, 0xc5, 0x82, 0xb7, 0x59, 0x10, 0x96, 0x30, 0xa0, 
0x7b, 0x7a, 0x08, 0xd4, 0x23, 0x06, 0x80, 0x00, 0x3c, 0xb5, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xbe, 
0xd4, 0xb6, 0x2e, 0xb5, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0x4e, 0xff, 0xae, 0x92, 0xac, 
0x5e, 0xcf, 0xfd, 0x4e, 0xbb, 0x31, 0x26, 0x0f, 0x78, 0xbe, 0x6f, 0x7a, 0x04, 0x21, 0x54, 0x85, 
0x0d, 0xdf, 0xc9, 0x97, 0xa9, 0xf1, 0xd7, 0x60, 0x06, 0x7c, 0xda, 0xd2, 0x24, 0x26, 0xbc, 0x05, 
0x6b, 0x78, 0x8c, 0x9a, 0xcd, 0x08, 0x48, 0xfb, 0x9e, 0xba, 0x71, 0xf0, 0x16, 0xfc, 0x14, 0x0d, 
0xd3, 0xfb, 0x8f, 0x1f, 0x61, 0xfd, 0xb4, 0x87, 0x8f, 0xa1, 0x74, 0xf1, 0xbb, 0x20, 0x7c, 0x94, 
0xa1, 0x8b, 0xe7, 0xb1, 0xe1, 0x23, 0xda, 0x13, 0x3a, 0xdd, 0x8d, 0x08, 0x1f, 0x29, 0x45, 0x17, 
0xc9, 0x86, 0x38, 0xf0, 0x94, 0xfa, 0x2a, 0x5d, 0x1d, 0x8d, 0x13, 0xa9, 0x40, 0xaf, 0xad, 0xa5, 
0xa1, 0x48, 0x3c, 0xaf, 0x47, 0xe9, 0x44, 0x89, 0x4f, 0xd1, 0xc3, 0xcd, 0x5b, 0x24, 0xb7, 0x05, 
0x83, 0xac, 0x1b, 0xc9, 0xb7, 0x2f, 0x68, 0xb9, 0xb1, 0x76, 0xea, 0xf4, 0xcd, 0xf7, 0xa8, 0xf8, 
0x9e, 0x1b, 0x92, 0x50, 0x27, 0x29, 0x5b, 0x5d, 0x22, 0x02, 0x02, 0xa2, 0x56, 0xd9, 0x49, 0xd9, 
0x5c, 0x48, 0xf2, 0xfd, 0xa4, 0xf0, 0xb2, 0x2e, 0x4c, 0x21, 0xda, 0x7d, 0xa6, 0xf0, 0x3e, 0x25, 
0x84, 0x89, 0x14, 0x5e, 0xe4, 0x87, 0xa4, 0x9a, 0xdc, 0x67, 0xa4, 0x74, 0x1d, 0x0f, 0x69, 0xf9, 
0x59, 0x03, 0x8a, 0x8e, 0x14, 0x5e, 0x89, 0x80, 0x36, 0xa1, 0xb0, 0x14, 0xaa, 0x90, 0x07, 0x69, 
0x7a, 0xd3, 0x25, 0x8c, 0xc8, 0xc9, 0x0d, 0x9a, 0x7e, 0xe4, 0x81, 0x4d, 0x4d, 0x1a, 0x76, 0x64, 
0x86, 0x24, 0x46, 0xff, 0x37, 0xd4, 0x9d, 0x0b, 0x09, 0x9b, 0xe8, 0x4f, 0xa9, 0x99, 0x1c, 0x0a, 
0xaa, 0x74, 0xe7, 0xa8, 0x99, 0x07, 0x87, 0x3d, 0xd4, 0xb4, 0x81, 0xdd, 0x2c, 0x6a, 0x06, 0xc3, 
0x61, 0x31, 0x35, 0x83, 0x60, 0xb7, 0x28, 0xa8, 0x2e, 0x7d, 0x61, 0x37, 0x4a, 0xb9, 0x61, 0xd9, 
0x6e, 0x6a, 0xb6, 0x27, 0x80, 0x2a, 0xc2, 0x2a, 0x6a, 0xce, 0x86, 0xf4, 0x7c, 0x43, 0x0f, 0xda, 
0x85, 0x83, 0xa4, 0xc0, 0x51, 0x25, 0x7b, 0xb2, 0x1a, 0xb4, 0x9c, 0xcc, 0x06, 0x53, 0xa4, 0x01, 
0x22, 0x16, 0x8b, 0xa1, 0x0a, 0xb1, 0x9f, 0x42, 0x71, 0x98, 0xd2, 0xfe, 0xa6, 0xe5, 0x47, 0x55, 
0x28, 0xda, 0x51, 0x38, 0x2d, 0xae, 0x26, 0xd8, 0x4a, 0x0a, 0xcf, 0x94, 0xfb, 0xaf, 0xf4, 0x89, 
0x42, 0x37, 0x08, 0x85, 0x7f, 0x52, 0x78, 0x5e, 0x4b, 0x8c, 0xd5, 0xea, 0x23, 0x85, 0x0f, 0xc9, 
0x21, 0x04, 0xdf, 0x43, 0xc9, 0xef, 0xe5, 0x45, 0xc2, 0x69, 0x5b, 0xac, 0xb0, 0x8d, 0xb2, 0xf5, 
0x2e, 0xd9, 0x13, 0xae, 0xac, 0x9c, 0x38, 0x69, 0xdd, 0x2d, 0x5a, 0x5e, 0x7c, 0x22, 0x59, 0x07, 
0xb2, 0x70, 0x97, 0xc8, 0xdf, 0x37, 0x1f, 0xd1, 0xc3, 0xb6, 0x78, 0xa9, 0xaa, 0xf4, 0x9f, 0x1d, 
0x15, 0x8a, 0x66, 0x5b, 0xbb, 0xe5, 0x8d, 0x90, 0xee, 0x16, 0x5d, 0x1d, 0x8b, 0x0b, 0x4f, 0x69, 
0x8e, 0xd1, 0xc5, 0xe5, 0x58, 0xf0, 0x91, 0xec, 0x3d, 0x9d, 0xce, 0x86, 0x80, 0x8f, 0x0c, 0xdf, 
0xe8, 0xf4, 0x2d, 0x23, 0x7c, 0xd4, 0xa3, 0x9b, 0x16, 0xf0, 0x31, 0x8a, 0x86, 0x7d, 0x63, 0xa7, 
0x0e, 0x5c, 0x43, 0xc3, 0x5a, 0xf8, 0x58, 0x47, 0xdd, 0xc3, 0x58, 0x00, 0x22, 0x9c, 0x33, 0xba, 
0x57, 0x86, 0x8f, 0xc4, 0x1d, 0x0e, 0x69, 0xd9, 0x69, 0xa5, 0xe7, 0xe8, 0x2b, 0xf9, 0x79, 0x79, 
0xf1, 0xe0, 0xf0, 0x17, 0x3c, 0xf7, 0xa8, 0x5b, 0x3c, 0x1d, 0x16, 0x9a, 0xe1, 0x2f, 0x27, 0x67, 
0xc1, 0xbf, 0x88, 0x52, 0x2b, 0x27, 0x74, 0xe1, 0x12, 0xe1, 0xff, 0xf6, 0x07, 0x2c, 0x52, 0x58, 
0xa1, 0xc6, 0x01, 0x36, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 
0x82, };

/*-------------------------------------------------------------
 * Widgets definition
 *-------------------------------------------------------------*/
typedef enum {
  INSIDE = 0,
  INFO,
  SCALE,
  CAMERA1,
  CAMERA2,
  CONFIG,
} WidgetID_t;

void onInside (EventPoint_t &ep);
void onInfo   (EventPoint_t &ep);
void onScale  (EventPoint_t &ep);
void onCamera (EventPoint_t &ep);
void onConfig (EventPoint_t &ep);

static const Widget_t widgets[] {
  {   0,   0, 256, 192, NULL, 0, EVENT_ALL, onInside },
  { 256,   0,  64, 120, NULL, 0, EVENT_ALL, onInfo   },
  {   0, 195, 256,  45, NULL, 0, EVENT_ALL, onScale  },
  { 265, 120, ICON_WIDTH, ICON_HEIGHT, icon_camera1, sizeof(icon_camera1), EVENT_CLICK, onCamera },
  { 265, 120, ICON_WIDTH, ICON_HEIGHT, icon_camera2, sizeof(icon_camera2), EVENT_NONE,  nullptr  },
  { 265, 170, ICON_WIDTH, ICON_HEIGHT, icon_config,  sizeof(icon_config ), EVENT_CLICK, onConfig },
};

#define N_WIDGETS  (sizeof(widgets) / sizeof(widgets[0]))

/*-------------------------------------------------------------
 * Event callback functions
 *-------------------------------------------------------------*/
void DrawWidget(int id);

void onInside(EventPoint_t &ep) {
  DBG_EXEC(printf("onInside\n"));
}

void onInfo(EventPoint_t &ep) {
  DBG_EXEC(printf("onInfo\n"));
}

void onScale(EventPoint_t &ep) {
  DBG_EXEC(printf("onScale\n"));
}

void onCamera(EventPoint_t &ep) {
  DBG_EXEC(printf("onCamera\n"));
  DrawWidget(CAMERA2);
  sdcard_save();
  DrawWidget(CAMERA1);
}

void onConfig(EventPoint_t &ep) {
  DBG_EXEC(printf("onConfig\n"));
}

#ifdef _TFT_eSPIH_
/*-------------------------------------------------------------
 * Draw PNG
 *-------------------------------------------------------------*/
// https://github.com/Bodmer/TFT_eSPI/tree/master/examples/PNG%20Images
// Include the PNG decoder library, available via the IDE library manager
#include <PNGdec.h>

PNG png; // PNG decoder instance

//=========================================v==========================================
//  pngDraw: Callback function to draw pixels to the display
//====================================================================================
// Position variables must be global (PNGdec does not handle position coordinates)
static uint16_t xpos = 0;
static uint16_t ypos = 0;

// This function will be called during decoding of the png file to render each image
// line to the TFT. PNGdec generates the image line and a 1bpp mask.
static void pngDraw(PNGDRAW *pDraw) {
  uint16_t lineBuffer[TFT_HEIGHT];          // Line buffer for rendering
  uint8_t  maskBuffer[TFT_HEIGHT / 8 + 1];  // Mask buffer

  png.getLineAsRGB565(pDraw, lineBuffer, PNG_RGB565_BIG_ENDIAN, 0xffffffff);

  if (png.getAlphaMask(pDraw, maskBuffer, 255)) {
    // Note: pushMaskedImage is for pushing to the TFT and will not work pushing into a sprite
    tft.pushMaskedImage(xpos, ypos + pDraw->y, pDraw->iWidth, 1, lineBuffer, maskBuffer);
  }
}

static void DrawPNG(uint8_t *img, size_t size, uint16_t x, uint16_t y) {
  xpos = x;
  ypos = y;

  if (png.openFLASH(img, size, pngDraw) == PNG_SUCCESS) {
    png.decode(NULL, 0);
    // png.close(); // Required for files, not needed for FLASH arrays
  }
}
#endif // _TFT_eSPIH_

void DrawWidget(int id) {
  GFX_EXEC(startWrite());

  if (widgets[id].img) {
#if defined(_TFT_eSPIH_)
    DrawPNG((uint8_t*)widgets[id].img, widgets[id].size, widgets[id].x, widgets[id].y);
#elif defined(LOVYANGFX_HPP_)
    GFX_EXEC(drawPng((uint8_t*)widgets[id].img, widgets[id].size, widgets[id].x, widgets[id].y));
#endif
  }

  GFX_EXEC(endWrite());
}

void widget_setup(void) {
  DrawWidget(CAMERA1);
  DrawWidget(CONFIG);
}

void widget_event(EventPoint_t &ep) {
  for (int i = 0; i < N_WIDGETS; i++) {

    // In case the touch event to be detected
    if ((widgets[i].event & ep.event) &&  widgets[i].callback) {

      // Find the widget where the event fired
      if (widgets[i].x <= ep.x && ep.x <= widgets[i].x + widgets[i].w &&
          widgets[i].y <= ep.y && ep.y <= widgets[i].y + widgets[i].h) {
        DBG_EXEC(printf("event = %d, x = %d, y = %d\n", ep.event, ep.x, ep.y));
        widgets[i].callback(ep);
        delay(PERIOD_EVENT);
      }
    }
  }
}